module Parser.SkelSimpleCalc where

-- Haskell module generated by the BNF converter

import Parser.AbsSimpleCalc
import Parser.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdentifier :: Identifier -> Result
transIdentifier x = case x of
  Identifier string -> failure x
transLambda :: Lambda -> Result
transLambda x = case x of
  Lambda string -> failure x
transTypeVar :: TypeVar -> Result
transTypeVar x = case x of
  TypeVar identifier -> failure x
transType :: Type -> Result
transType x = case x of
  ArrowT type_1 type_2 -> failure x
  PlusT type_1 type_2 -> failure x
  TimesT type_1 type_2 -> failure x
  LfpT identifier type_ -> failure x
  GfpT identifier type_ -> failure x
  OneT -> failure x
  VarT typevar -> failure x
transTerm :: Show a => Term a -> Result
transTerm x = case x of
  Var _ identifier -> failure x
  Unit _ -> failure x
  Inl _ term -> failure x
  Inr _ term -> failure x
  Pair _ term1 term2 -> failure x
  Abs _ lambda identifier term -> failure x
  In _ term -> failure x
  App _ term1 term2 -> failure x
  Fst _ term -> failure x
  Snd _ term -> failure x
  Out _ term -> failure x
  Match _ identifier1 term1 identifier2 term2 term3 -> failure x
  Rec _ term1 term2 -> failure x
  Corec _ term1 term2 -> failure x

transPropDecl :: PropDecl -> Result
transPropDecl x = case x of
  PropDecl identifier type_ -> failure x
transPropDecls :: PropDecls -> Result
transPropDecls x = case x of
  NoPropDecls -> failure x
  PropDecls propdecls -> failure x
transPropArg :: PropArg -> Result
transPropArg x = case x of
  PropArg term -> failure x
transPropArgs :: PropArgs -> Result
transPropArgs x = case x of
  NoPropArgs -> failure x
  PropArgs propargs -> failure x
transFormula :: Formula -> Result
transFormula x = case x of
  Bottom -> failure x
  PropVar identifier propargs -> failure x
  Implies formula1 formula2 -> failure x
  Or formula1 formula2 -> failure x
  And formula1 formula2 -> failure x
  Forall identifier type_ formula -> failure x
  Exists identifier type_ formula -> failure x
  EqForm equality -> failure x
  Later formula -> failure x
  LfpF identifier propdecls formula -> failure x
  GfpF identifier propdecls formula -> failure x
transEquality :: Equality -> Result
transEquality x = case x of
  Equality term1 term2 -> failure x
transThmArg :: ThmArg -> Result
transThmArg x = case x of
  ThmArg formula -> failure x
transThmArgs :: ThmArgs -> Result
transThmArgs x = case x of
  NoArgs -> failure x
  Args thmargs -> failure x
transProof :: Proof -> Result
transProof x = case x of
  PrHole -> failure x
  PrVar identifier -> failure x
  PrBotElim proof -> failure x
  PrThmInst identifier thmargs -> failure x
  PrImplIntro lambda identifier proof -> failure x
  PrImplElim proof1 proof2 -> failure x
  PrAndIntro proof1 proof2 -> failure x
  PrAndElimFst proof -> failure x
  PrAndElimSnd proof -> failure x
  PrOrIntroLeft proof -> failure x
  PrOrIntroRight proof -> failure x
  PrOrElim proof1 proof2 -> failure x
  PrNec proof -> failure x
  PrAppl proof1 proof2 -> failure x
  PrFP identifier proof -> failure x
  PrAllIntro identifier proof -> failure x
  PrAllElim proof term -> failure x
  PrExIntro term proof -> failure x
  PrExElim identifier proof1 proof2 -> failure x
  PrRefl term1 term2 -> failure x
  PrSym proof -> failure x
  PrTrans proof1 proof2 -> failure x
  PrExt identifier proof -> failure x
  PrFunEq proof term -> failure x
  PrUnit term -> failure x
  PrFst proof -> failure x
  PrSnd proof -> failure x
  PrPair proof1 proof2 -> failure x
  PrOut proof -> failure x
  PrCoind proof -> failure x
  PrUnitInd proof identifier -> failure x
  PrInl proof -> failure x
  PrInr proof -> failure x
  PrSumInd identifier1 proof1 identifier2 proof2 identifier3 -> failure x
  PrIn proof -> failure x
  PrLfpInd identifier1 proof identifier2 -> failure x
transThmDecl :: ThmDecl -> Result
transThmDecl x = case x of
  ThmDecl identifier propdecls -> failure x
transThmDecls :: ThmDecls -> Result
transThmDecls x = case x of
  NoDeclArgs -> failure x
  DeclArgs thmdecls -> failure x
transEntry :: Entry -> Result
transEntry x = case x of
  TypeDef identifier type_ -> failure x
  Def identifier type_ term -> failure x
  Theorem identifier thmdecls formula proof -> failure x
  FormDef identifier thmdecls formula -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Program entrys -> failure x

